{"version":3,"sources":["upload/SimpleFormUpload.js","upload/CameraUpload.js","upload/H5CameraUpload.js","App.js","serviceWorker.js","index.js"],"names":["React","Component","H5CameraUpload","props","UPLOAD_ENDPOINT","state","screenshot","result","tab","onSubmit","bind","handleRetake","uploadFile","this","setState","e","preventDefault","res","data","comment","file","base64Image","split","pop","formData","FormData","append","axios","post","headers","catch","error","console","log","dataUri","stream","className","onTakePhoto","onCameraError","idealFacingMode","FACING_MODES","ENVIRONMENT","imageType","IMAGE_TYPES","JPG","imageCompression","isMaxResolution","isImageMirror","onCameraStart","onCameraStop","onClick","src","type","length","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qUAG+BA,IAAMC,U,mBCCVD,IAAMC,U,gBCuHlBC,G,kBAnHX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAFVC,gBAAkB,6BAGd,EAAKC,MAAO,CACVC,WAAW,GACXC,OAAO,GACPC,IAAK,GAEP,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,WAAa,EAAKA,WAAWF,KAAhB,gBATH,E,4EAafG,KAAKC,SAAS,CAAER,WAAY,GAAIC,OAAQ,O,wEAG7BQ,G,8EACXA,EAAEC,iB,SAEcH,KAAKD,WAAWC,KAAKR,MAAMC,Y,OAAvCW,E,OAEJJ,KAAKC,SAAS,CAACP,OAAQU,EAAIC,KAAKC,U,iLAGnBC,G,gFAETC,EAAcD,EAAKE,MAAM,YAAYC,OAEnCC,EAAW,IAAIC,UAEZC,OAAO,eAAgBL,G,SAElBM,IAAMC,KAAKf,KAAKT,gBAAiBoB,EAAS,CACpDK,QAAS,CACL,eAAgB,yBAMnBC,OAAM,SAACC,GACRC,QAAQC,IAAIF,M,iLAIPG,GAETF,QAAQC,IAAI,aAEZpB,KAAKC,SAAS,CAAER,WAAY4B,M,oCAGjBH,GACXC,QAAQD,MAAM,gBAAiBA,K,oCAGpBI,GACXH,QAAQC,IAAI,mB,qCAIZD,QAAQC,IAAI,kB,+BAGL,IAAD,OACN,OACA,yBAAKG,UAAU,OACX,6BACCvB,KAAKR,MAAMC,WAAc,8BACtB,kBAAC,IAAD,CACA+B,YAAgB,SAACH,GAAc,EAAKG,YAAYH,IAChDI,cAAkB,SAACP,GAAY,EAAKO,cAAcP,IAClDQ,gBAAmBC,eAAaC,YAEhCC,UAAaC,cAAYC,IACzBC,iBAAoB,IACpBC,iBAAmB,EACnBC,eAAiB,EAKjBC,cAAkB,SAACb,GAAa,EAAKa,cAAcb,IACnDc,aAAiB,WAAQ,EAAKA,mBAGlC,6BACCpC,KAAKR,MAAMC,WACZ,6BACE,yBAAK8B,UAAU,eACb,yBAAKA,UAAU,YACb,4BAAQc,QAASrC,KAAKF,cAAtB,WAETE,KAAKR,MAAMC,WAAc,6BAAK,yBAAK6C,IAAKtC,KAAKR,MAAMC,cAAyB,+BAEvE,6BAAK,6BACL,uDACA,0BAAMG,SAAWI,KAAKJ,UACpB,4BAAQ2C,KAAK,UAAb,eACA,6BAAmC,IAA7BvC,KAAKR,MAAME,OAAO8C,OAAgB,8BAEhC,6BAAMxC,KAAKR,MAAME,aAMxB,W,GA9GYN,cCcdqD,E,iLAVX,OACE,6BAEE,kBAAC,EAAD,W,GALUrD,aCKEsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.028e940a.chunk.js","sourcesContent":["import React from 'react'\nimport axios from 'axios';\n\nclass SimpleFormUpload extends React.Component {\n\n    UPLOAD_ENDPOINT = '/api/v1/ayi/garbage_image';\n    constructor(props) {\n        super(props);\n        this.state ={\n          file:null,\n          result:\"\",\n        }\n        this.onSubmit = this.onSubmit.bind(this)\n        this.onChange = this.onChange.bind(this)\n        this.uploadFile = this.uploadFile.bind(this)\n    }\n\n    checkMimeType=(event)=>{\n        //getting file object\n        let files = event.target.files \n        //define message container\n        let err = ''\n        // list allow mime type\n       const types = ['image/png', 'image/jpeg', 'image/gif']\n        // loop access array\n        for(var x = 0; x<files.length; x++) {\n         // compare file type find doesn't matach\n             if (types.every(type => files[x].type !== type)) {\n             // create error message and assign to container   \n             err += files[x].type+' is not a supported format\\n';\n           }\n         };\n      \n       if (err !== '') { // if message not same old that mean has error \n            event.target.value = null // discard selected file\n            console.log(err)\n             return false; \n        }\n       return true;\n      \n    }\n\n    checkFileSize=(event)=>{\n        let files = event.target.files\n        let size = 10485760 \n        let err = \"\"; \n        for(var x = 0; x<files.length; x++) {\n            if (files[x].size > size) {\n                err += files[x].type+'is too large, please pick a smaller file\\n';\n            }    \n        };\n        if (err !== '') {\n            event.target.value = null\n            console.log(err)\n            return false\n        }\n    \n        return true;\n    }\n\n    async onSubmit(e){\n        e.preventDefault() \n        let res = await this.uploadFile(this.state.file);\n        console.log(res.data);\n        this.setState({result: res.data.comment})\n    }\n\n    onChange(e) {\n        let file = e.target.files[0]\n        if(this.checkMimeType(e) && this.checkFileSize(e)){\n            this.setState({file:file})\n        }   \n    }\n        \n    async uploadFile(file){\n        console.log(file)\n        const formData = new FormData();\n        \n        formData.append('image_file',file)\n        \n        return  await axios.post(this.UPLOAD_ENDPOINT, formData,{\n            headers: {\n                'content-type': 'multipart/form-data'\n            }\n        })\n        /*.then(response => {\n            console.log(response.data)\n            this.setState({result: response.data})\n        })*/.catch((error) => {\n            console.log(error)\n        });\n    }\n    \n    render() {\n      return (\n        <form onSubmit={ this.onSubmit }>\n          <h1>Upload Image</h1>\n          <input type=\"file\" onChange={ this.onChange } />\n          <button type=\"submit\">Upload File</button>\n          <div>{this.state.result.length === 0 ? (<div></div>\n            ) : (\n                <div>{this.state.result}</div>\n            )}\n          </div>\n        </form>\n     )\n    }\n        \n}\n\nexport default SimpleFormUpload;","import React from \"react\";\nimport Webcam from \"react-webcam\";\nimport axios from 'axios';\n\nclass CameraUpload extends React.Component {\n    UPLOAD_ENDPOINT = '/api/v1/ayi/camera_capture';\n    constructor(props) {\n        super(props);\n        this.state ={\n          screenshot:null,\n          result:\"\",\n          tab: 0,\n        }\n        this.onSubmit = this.onSubmit.bind(this)\n        //this.onChange = this.onChange.bind(this)\n        this.uploadFile = this.uploadFile.bind(this)\n    }\n\n    handleCapture = () => {\n        const screenshot = this.webcam.getScreenshot();\n        this.setState({ screenshot });\n    }\n\n    async onSubmit(e){\n        e.preventDefault() \n        //console.log(this.state.screenshot)\n        let res = await this.uploadFile(this.state.screenshot);\n        //console.log(res.data);\n        this.setState({result: res.data.comment})\n    }\n\n    async uploadFile(file){\n        //let i = file.indexOf('base64,');\n        let base64Image = file.split(';base64,').pop();\n        //console.log(file.slice(i + 7))\n        //console.log(base64Image)\n        //let some_image = window.atob(base64Image)\n        //let buffer = Buffer.from(file.slice(i + 7), 'base64');\n        //let buffer = Buffer.from(some_image)\n        //let image_file = new File(buffer, \"garbage.jpeg\",{type: \"image/jpeg\"});\n        //console.log(image_file)\n        //let image_file = new File(file, \"garbage.jpg\", {type: \"image/jpeg\"})\n        //let image_file = base64Img.img(file, '', 'garbage.jpg');\n\n        const formData = new FormData();\n        \n        formData.append('image_string', base64Image)\n        \n        return  await axios.post(this.UPLOAD_ENDPOINT, formData,{\n            headers: {\n                'content-type': 'multipart/form-data'\n            }\n        })\n        /*.then(response => {\n            console.log(response.data)\n            this.setState({result: response.data})\n        })*/.catch((error) => {\n            console.log(error)\n        });\n    }\n\n    render() {\n        return (\n          <div>\n            <h1>Take a photo of garbage</h1>\n            <Webcam\n              audio={false}\n              screenshotFormat=\"image/jpeg\"\n              ref={node => this.webcam = node}\n            />\n            \n            <div>\n              \n              <div className='screenshots'>\n                <div className='controls'>\n                  <button onClick={this.handleCapture}>capture</button>\n                </div>\n        {this.state.screenshot ? (<div><img src={this.state.screenshot} /></div>) : (<div></div>)}\n              </div>\n              <div>{this.state.screenshot ? (<div>\n              <h2>Are you ready to upload</h2>\n              <form onSubmit={ this.onSubmit }>\n                <button type=\"submit\">Upload File</button>\n                <div>{this.state.result.length === 0 ? (<div></div>\n                    ) : (\n                        <div>{this.state.result}</div>\n                    )}\n                </div>\n                \n              </form></div>) : (null)\n              }</div>\n              \n            </div>\n          </div>\n        );\n      }\n}\n\nexport default CameraUpload;","import React, { Component } from 'react';\nimport Camera, { FACING_MODES, IMAGE_TYPES } from 'react-html5-camera-photo';\nimport axios from 'axios';\nimport 'react-html5-camera-photo/build/css/index.css';\n \nclass H5CameraUpload extends Component {\n    //UPLOAD_ENDPOINT = 'http://127.0.0.1:40086/api/v1/ayi/camera_capture';\n    UPLOAD_ENDPOINT = '/api/v1/ayi/camera_capture';\n    constructor(props) {\n        super(props);\n        this.state ={\n          screenshot:\"\",\n          result:\"\",\n          tab: 0,\n        }\n        this.onSubmit = this.onSubmit.bind(this)\n        this.handleRetake = this.handleRetake.bind(this)\n        this.uploadFile = this.uploadFile.bind(this)\n    }\n\n    handleRetake() {\n        this.setState({ screenshot: \"\", result: \"\" });\n    }\n\n    async onSubmit(e){\n        e.preventDefault() \n        //console.log(this.state.screenshot)\n        let res = await this.uploadFile(this.state.screenshot);\n        //console.log(res.data);\n        this.setState({result: res.data.comment})\n    }\n\n    async uploadFile(file){\n        //let i = file.indexOf('base64,');\n        let base64Image = file.split(';base64,').pop();\n\n        const formData = new FormData();\n        \n        formData.append('image_string', base64Image)\n        \n        return  await axios.post(this.UPLOAD_ENDPOINT, formData,{\n            headers: {\n                'content-type': 'multipart/form-data'\n            }\n        })\n        /*.then(response => {\n            console.log(response.data)\n            this.setState({result: response.data})\n        })*/.catch((error) => {\n            console.log(error)\n        });\n    }\n\n    onTakePhoto (dataUri) {\n        // Do stuff with the photo...\n        console.log('takePhoto');\n        //console.log(dataUri)\n        this.setState({ screenshot: dataUri });\n    }\n \n    onCameraError (error) {\n        console.error('onCameraError', error);\n    }\n \n    onCameraStart (stream) {\n        console.log('onCameraStart');\n    }\n \n    onCameraStop () {\n        console.log('onCameraStop');\n    }\n \n    render () {\n        return (\n        <div className=\"App\">\n            <div>\n            {this.state.screenshot ? (<div></div>) : (\n                <Camera\n                onTakePhoto = { (dataUri) => { this.onTakePhoto(dataUri); } }\n                onCameraError = { (error) => { this.onCameraError(error); } }\n                idealFacingMode = {FACING_MODES.ENVIRONMENT}\n                //idealResolution = {{width: 640, height: 480}}\n                imageType = {IMAGE_TYPES.JPG}\n                imageCompression = {0.97}\n                isMaxResolution = {false}\n                isImageMirror = {false}\n                //isSilentMode = {true}\n                //isDisplayStartCameraError = {true}\n                //isFullscreen = {true}\n                //sizeFactor = {1}\n                onCameraStart = { (stream) => { this.onCameraStart(stream); } }\n                onCameraStop = { () => { this.onCameraStop(); } }\n                />)}\n            </div>\n            <div>\n            {this.state.screenshot ? (\n            <div>\n              <div className='screenshots'>\n                <div className='controls'>\n                  <button onClick={this.handleRetake}>retake</button>\n                </div>\n        {this.state.screenshot ? (<div><img src={this.state.screenshot} /></div>) : (<div></div>)}\n              </div>\n              <div><div>\n              <h2>Are you ready to upload</h2>\n              <form onSubmit={ this.onSubmit }>\n                <button type=\"submit\">Upload File</button>\n                <div>{this.state.result.length === 0 ? (<div></div>\n                    ) : (\n                        <div>{this.state.result}</div>\n                    )}\n                </div>\n                \n              </form></div> \n              </div></div>)\n              : (null)}\n            </div>\n        </div>\n        \n        );\n    }\n}\n \nexport default H5CameraUpload;","import React, {Component} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n//import Upload from \"./upload/Upload\"\nimport SimpleFormUpload from \"./upload/SimpleFormUpload\"\nimport CameraUpload from \"./upload/CameraUpload\"\nimport H5CameraUpload from \"./upload/H5CameraUpload\"\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        \n        <H5CameraUpload />\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
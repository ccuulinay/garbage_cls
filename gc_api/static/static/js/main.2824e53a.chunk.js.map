{"version":3,"sources":["assets/上海_可回收物_sh.png","assets/上海_干垃圾_sh.png","assets/上海_有害垃圾_sh.png","assets/上海_湿垃圾_sh.png","upload/H5CameraUpload.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","H5CameraUpload","props","UPLOAD_ENDPOINT","state","flag_takePhoto","flag_previewPhoto","flag_showResult","screenshot","result","tab","city","cities","onSubmit","bind","handleRetake","uploadFile","handleResult","_onCitySelect","e","console","log","value","this","setState","cur_state","src","recyclable_logo","alt","residual_logo","hazardous_logo","househood_food_logo","preventDefault","res","data","comment","file","base64Image","split","pop","formData","FormData","append","axios","post","headers","dataUri","error","stream","className","onTakePhoto","onCameraError","idealFacingMode","FACING_MODES","ENVIRONMENT","imageType","IMAGE_TYPES","JPG","imageCompression","isMaxResolution","isImageMirror","onCameraStart","onCameraStop","length","onClick","options","onChange","placeholder","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2824e53a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/上海_可回收物_sh.94658c33.png\";","module.exports = __webpack_public_path__ + \"static/media/上海_干垃圾_sh.398eb4a3.png\";","module.exports = __webpack_public_path__ + \"static/media/上海_有害垃圾_sh.698541bb.png\";","module.exports = __webpack_public_path__ + \"static/media/上海_湿垃圾_sh.4bb2a660.png\";","import React, { Component } from 'react';\nimport Camera, { FACING_MODES, IMAGE_TYPES } from 'react-html5-camera-photo';\nimport axios from 'axios';\nimport 'react-html5-camera-photo/build/css/index.css';\nimport Dropdown from 'react-dropdown'\nimport 'react-dropdown/style.css'\nimport \"./H5CameraUpload.css\"\n\nimport recyclable_logo from '../assets/上海_可回收物_sh.png'; \nimport residual_logo from '../assets/上海_干垃圾_sh.png'; \nimport hazardous_logo from \"../assets/上海_有害垃圾_sh.png\";\nimport househood_food_logo from \"../assets/上海_湿垃圾_sh.png\";\n \nclass H5CameraUpload extends Component {\n    //UPLOAD_ENDPOINT = 'http://127.0.0.1:40086/api/v1/ayi/camera_capture';\n    UPLOAD_ENDPOINT = '/api/v1/ayi/camera_capture';\n\n    constructor(props) {\n        super(props);\n        this.state ={\n          flag_takePhoto: 1,\n          flag_previewPhoto: 0,\n          flag_showResult: 0,\n          screenshot:\"\",\n          result:\"\",\n          tab: 0,\n          city: \"sh\",\n          cities: [\"sh\", \"gz\"]\n        }\n        this.onSubmit = this.onSubmit.bind(this)\n        this.handleRetake = this.handleRetake.bind(this)\n        this.uploadFile = this.uploadFile.bind(this)\n        this.handleResult = this.handleResult.bind(this)\n        this._onCitySelect = this._onCitySelect.bind(this)\n    }\n\n    _onCitySelect(e) {\n        //e.preventDefault();\n        console.log(e.value);\n        this.setState({\n            city: e.value\n        });\n    }\n\n    handleRetake() {\n        this.setState({\n             screenshot: \"\", result: \"\", flag_takePhoto:1,  flag_previewPhoto:0, flag_showResult:0\n            });\n    }\n\n    handleResult() {\n        let cur_state = this.state.result\n        if (cur_state === \"可回收物\") {\n            return <img src={recyclable_logo} alt=\"result\"/>\n        }else if (cur_state === \"干垃圾\") {\n            return <img src={residual_logo} alt=\"result\"/>\n        }else if (cur_state === \"有害垃圾\") {\n            return <img src={hazardous_logo} alt=\"result\"/>\n        }else if (cur_state === \"湿垃圾\") {\n            return <img src={househood_food_logo} alt=\"result\"/>\n        }else if (cur_state === \"人像\") {\n            return <p>你是什么垃圾？！</p>\n        }\n    }\n\n    async onSubmit(e){\n        e.preventDefault() \n        //console.log(this.state.screenshot)\n        try {\n            let res = await this.uploadFile(this.state.screenshot);\n            //console.log(res.data);\n            this.setState({\n                result: res.data.comment, flag_takePhoto:0,  flag_previewPhoto:0, flag_showResult:1\n            })\n        } catch(err){\n            console.log(err)\n        }\n        \n    }\n\n    async uploadFile(file){\n        //let i = file.indexOf('base64,');\n        let base64Image = file.split(';base64,').pop();\n\n        const formData = new FormData();\n        \n        formData.append('image_string', base64Image)\n        formData.append('city', this.state.city)\n        return  await axios.post(this.UPLOAD_ENDPOINT, formData,{\n            headers: {\n                'content-type': 'multipart/form-data'\n            }\n        })\n        /*.then(response => {\n            console.log(response.data)\n            this.setState({result: response.data})\n        }).catch((error) => {\n            console.log(error)\n        });*/\n    }\n\n    onTakePhoto (dataUri) {\n        // Do stuff with the photo...\n        console.log('takePhoto');\n        //console.log(dataUri)\n        this.setState({ \n            screenshot: dataUri, flag_takePhoto:0,  flag_previewPhoto:1, flag_showResult:0\n         });\n    }\n \n    onCameraError (error) {\n        console.error('onCameraError', error);\n    }\n \n    onCameraStart (stream) {\n        console.log('onCameraStart');\n    }\n \n    onCameraStop () {\n        console.log('onCameraStop');\n    }\n \n    render () {\n        return (\n        <div className=\"App\">\n            <div></div>\n            <div className=\"camera-container\">\n            {this.state.flag_takePhoto ? (\n            <Camera\n                onTakePhoto = { (dataUri) => { this.onTakePhoto(dataUri); } }\n                onCameraError = { (error) => { this.onCameraError(error); } }\n                idealFacingMode = {FACING_MODES.ENVIRONMENT}\n                //idealResolution = {{width: 640, height: 480}}\n                imageType = {IMAGE_TYPES.JPG}\n                imageCompression = {0.97}\n                isMaxResolution = {false}\n                isImageMirror = {false}\n                //isSilentMode = {true}\n                //isDisplayStartCameraError = {true}\n                //isFullscreen = {true}\n                //sizeFactor = {1}\n                onCameraStart = { (stream) => { this.onCameraStart(stream); } }\n                onCameraStop = { () => { this.onCameraStop(); } }\n            />\n                ) : (<div></div>)}\n            </div>\n            <div className=\"result-container\">\n              <div>{this.state.result.length === 0 ? (<div></div>\n                    ) : (\n                        <div>\n                        \n                        <div>{this.handleResult()}</div>\n                        <div className='controls'>\n                            <button onClick={this.handleRetake}>retake</button>\n                        </div>\n                        </div>\n                    )}\n              </div>\n            </div>\n            <div className=\"preview-container\">\n            {this.state.flag_previewPhoto ? (\n            <div>\n              <div className='nav-control'>\n                <div className=\"nav-control-tips\">Please select city you are in: </div>\n                <Dropdown options={this.state.cities} onChange={this._onCitySelect} value={this.state.cities[0]} placeholder=\"Select a city\" />\n              </div>\n              <div className='screenshots'>\n                {\n                this.state.screenshot \n                ? (<div><img src={this.state.screenshot} alt=\"preview\"/></div>) \n                : (<div></div>)\n                }\n              </div>\n              <div className='controls'>\n                  <button onClick={this.handleRetake}>retake</button>\n                  <button onClick={this.onSubmit}>upload</button>\n                  \n              </div>\n              <div><div>\n              \n              \n              </div> \n              </div></div>)\n              : (null)}\n            </div>\n            <div></div>\n        </div>\n        \n        );\n    }\n}\n \nexport default H5CameraUpload;","import React, {Component} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n//import Upload from \"./upload/Upload\"\n//import SimpleFormUpload from \"./upload/SimpleFormUpload\"\n//import CameraUpload from \"./upload/CameraUpload\"\nimport H5CameraUpload from \"./upload/H5CameraUpload\"\nimport Example from \"./dev/ResponsiveView\"\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        \n        <H5CameraUpload />\n        {/*<Example>\n        </Example>*/}\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}